@page "/"
@using CP380_B1_BlockList.Models
@using CP380_B3_BlockBlazor.Data
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
<!-- TODO: Add using and inject statements -->

<h3>Pending Transactions</h3>

@if (payloads == null)
{
    <p><em>Loading...</em></p>
}
else
{
   var a = 1;

    <table class="table">
        <thead>
            <tr>
                <th>a</th>
                <th>Name</th>
                <th>Amount</th>
                <th>Transaction</th>
                <th>Item</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var xyz in paylist)
            {

                <tr>
                    <td>@a</td>
                    <td>@xyz.user</td>
                    <td> @xyz.amount</td>
                    <td>@xyz.transactiontype</td>
                    <td>@xyz.item</td>
                </tr>

                a++;
            }
        </tbody>
        <!-- TODO: Add cards for each block in the block list
                 Each card should show:
                      - the position in the chain (starting at 0)
                      - the hash
                      - the nonce
                      - the previous hash
        -->
    </table>

}


<!-- TODO: Add EditForm to submit a new transaction to the server -->


@code {
    private IEnumerable<Payload> payloads;
    private Payload Payload = new Payload("", 0, 0, "");
    private string submitResponse = "";

    protected override async Task OnInitializedAsync()
    {
        // TODO: Fetch all the payloads from the service
    }

    private async Task HandleValidSubmit()
    {
        // TODO: submit the new payload to the web API using the PendingTransactionService
        //       - if succcessful, the payloads should be re-loaded
        //       - if there is an error, then the submitResponse variable should be updated with the error
    }
}
